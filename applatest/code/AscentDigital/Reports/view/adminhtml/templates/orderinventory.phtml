<style>
    @media (min-width: 500px) {

        /* ym */
        .dropdown-content {
            position: absolute;
            background-color: #f6f6f6;
            overflow: auto;
        }

        .dropdown-content a {
            color: black;
            padding: 10px 16px;
            text-decoration: none;
            display: block;
            width: 200px;
        }

        .dropdown-content a:hover {
            background-color: #ddd;
        }

        .show {
            display: block !important;
        }

        .dropdown-values {
            display: none;
        }

        /* ym */
        .row:after {
            content: " ";
            display: table;
            clear: both;
        }

        .optdel {
            display: none !important;
        }

        .row {
            padding-top: 25px;
        }

        .multiselect-dropdown span.maxselected {
            width: 100px;
        }

        .column_total {
            font-weight: bold;

        }

        .column-half {
            float: left;
            width: 20%;
            padding: 0 5px;
            box-sizing: border-box;
        }

        .column-half-right {
            float: right;
            width: 20%;
            box-sizing: border-box;
        }

        .button-import {
            white-space: nowrap;
            margin-left: 10px;
        }

        .input-box {
            white-space: nowrap;
            margin-left: 10px;
        }

        .button-pdf {
            white-space: nowrap;
            margin-left: 10px;
        }

        .btn-primary {
            white-space: nowrap;
            margin-left: 10px;
        }

        .search-box {
            position: relative !important;
            line-height: 28px;
        }

        .result {
            position: absolute;
            z-index: 999;
            top: 100%;
            left: 0;
            background: #fff;
            width: 100%;
            box-sizing: border-box;
        }
    }
</style>
<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th,
    td {
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }
</style>
<form method="GET" action="">

    <?php
    $skusArray = array();
    $selectedSkus = '';
    if (isset($_GET['skus'])) {
        $selectedSkus = $_GET['skus'];
    }
    ?>
    <div class="row">
        <div class="column-half" style="width: 100%; display: flex;">
            <?php
            $productsData = $block->getProductSkus($selectedSkus);
            ?>
            <div class="input-box" style="clear: both;">
                <div class="modelno-repeat">
                    <div class="search-box">


                        <select name="field2" id="field2" multiple multiselect-search="true" multiselect-select-all="false" style="width:300px;height:30px" multiselect-max-items="1" onclick="addSku()" onchange="addOptions(Array.from(this.selectedOptions).map(x=>x.value??x.text))">
                            <?php
                            foreach ($productsData as $proData) {
                            ?>
                                <option value="<?= $proData['sku'] ?>" selected><?= $proData['name'] ?></option>
                            <?php }
                            ?>
                        </select>

                        <input type="hidden" name="skus" id="skus" value="<?= $selectedSkus ?>" />
                        <i class="fa fa-plus add_fields"></i>
                        <div class="result"></div>
                    </div>
                </div>
            </div>
            <button class="btn btn-primary" name="search" type="submit"><span class="glyphicon glyphicon-search"></span> Search</button>
            <button id="export_data" name="export_data" class="button-import" type="submit"> Export Data</button>
        </div>
    </div>
    <?php
    $orders = $block->getProductCollection();
    $ordersCount = count($orders);
    if ($orders && $ordersCount) {
    ?>
        <div class="content" style="margin: 15px;">
            <div>
                <?= 'Record(s) ' . $ordersCount ?>
            </div>
            <table class="data table table-order-items history" id="my-orders-table">
                <thead>
                    <tr>
                        <th scope="col" class="col date"><?= $block->escapeHtml(__('Product Id')) ?></th>
                        <th scope="col" class="col total"><?= $block->escapeHtml(__('Name')) ?></th>
                        <th scope="col" class="col total"><?= $block->escapeHtml(__('Sku')) ?></th>
                        <th scope="col" class="col total"><?= $block->escapeHtml(__('Stock')) ?></th>
                        <th scope="col" class="col total"><?= $block->escapeHtml(__('Saleable Stock')) ?></th>
                    </tr>
                </thead>
                <tbody>
                <?php
                    foreach ($orders as $_order) : ?>
                    
                      <tr>
                      <td data-th="<?= $block->escapeHtml(__('Product Id')) ?>" class="col id"><?= $_order->getEntityId() ?></td>
                      <td data-th="<?= $block->escapeHtml(__('Name')) ?>" class="col name"><?= $_order->getName() ?></td>
                      <td data-th="<?= $block->escapeHtml(__('Sku')) ?>" class="col sku"><?= $_order->getSku() ?></td>
                      <td data-th="<?= $block->escapeHtml(__('Stock')) ?>" class="col stock"><?= $_order->getQty() ?></td>
                      <td data-th="<?= $block->escapeHtml(__('Saleable Stock')) ?>" class="col saleable"><?= $_order->getQty()+$_order->getReserveQty()?></td>
                      </tr>
                    
              <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    <?php } else {
        echo " <div class='content' style='margin: 15px;'>
                No record found!
                </div>
                ";
    } ?>
</form>
<script>
    var style = document.createElement('style');
    style.setAttribute("id", "multiselect_dropdown_styles");
    style.innerHTML = `
.multiselect-dropdown{
  display: inline-block;
  padding: 2px 5px 0px 5px;
  border-radius: 4px;
  border: solid 1px #ced4da;
  background-color: white;
  position: relative;
  background-repeat: no-repeat;
  background-position: right .75rem center;
  background-size: 16px 12px;
}
.multiselect-dropdown span.optext, .multiselect-dropdown span.placeholder{
  margin-right:0.5em;
  margin-bottom:2px;
  padding:1px 0;
  border-radius: 4px;
  display:inline-block;
}
.multiselect-dropdown span.optext{
  background-color:lightgray;
  padding:1px 0.75em;
}
.multiselect-dropdown span.optext .optdel {
  float: right;
  margin: 0 -6px 1px 5px;
  font-size: 0.7em;
  margin-top: 2px;
  cursor: pointer;
  color: #666;
}
.multiselect-dropdown span.optext .optdel:hover { color: #c66;}
.multiselect-dropdown span.placeholder{
  color:#ced4da;
}
.multiselect-dropdown-list-wrapper{
  box-shadow: gray 0 3px 8px;
  z-index: 100;
  padding:2px;
  border-radius: 4px;
  border: solid 1px #ced4da;
  display: none;
  margin: -1px;
  position: absolute;
  top:0;
  left: 0;
  right: 0;
  background: white;
}
.multiselect-dropdown-list-wrapper .multiselect-dropdown-search{
  margin-bottom:5px;
}
.multiselect-dropdown-list{
  padding:2px;
  height: 15rem;
  overflow-y:auto;
  overflow-x: hidden;
}
.multiselect-dropdown-list::-webkit-scrollbar {
  width: 6px;
}
.multiselect-dropdown-list::-webkit-scrollbar-thumb {
  background-color: #bec4ca;
  border-radius:3px;
}

.multiselect-dropdown-list div{
  padding: 5px;
}
.multiselect-dropdown-list input{
  height: 1.15em;
  width: 1.15em;
  margin-right: 0.35em;
}
.multiselect-dropdown-list div.checked{
}
.multiselect-dropdown-list div:hover{
  background-color: #ced4da;
}
.multiselect-dropdown span.maxselected {width:100%;}
.multiselect-dropdown-all-selector {border-bottom:solid 1px #999;}
`;
    document.head.appendChild(style);

    function MultiselectDropdown(options) {
        var config = {
            search: true,
            height: '15rem',
            placeholder: 'Products',
            txtSelected: 'selected',
            txtAll: 'All',
            txtRemove: 'Remove',
            txtSearch: 'search',
            ...options
        };

        function newEl(tag, attrs) {

            var e = document.createElement(tag);
            if (attrs !== undefined) Object.keys(attrs).forEach(k => {
                if (k === 'class') {
                    Array.isArray(attrs[k]) ? attrs[k].forEach(o => o !== '' ? e.classList.add(o) : 0) : (attrs[k] !== '' ? e.classList.add(attrs[k]) : 0)
                } else if (k === 'style') {
                    Object.keys(attrs[k]).forEach(ks => {
                        e.style[ks] = attrs[k][ks];
                    });
                } else if (k === 'text') {
                    attrs[k] === '' ? e.innerHTML = '&nbsp;' : e.innerText = attrs[k]
                } else e[k] = attrs[k];
            });
            return e;
        }


        document.querySelectorAll("select[multiple]").forEach((el, k) => {
            var div = newEl('div', {
                class: 'multiselect-dropdown',
                style: {
                    width: config.style?.width ?? el.clientWidth + 'px',
                    padding: config.style?.padding ?? ''
                }
            });
            el.style.display = 'none';
            el.parentNode.insertBefore(div, el.nextSibling);
            var listWrap = newEl('div', {
                class: 'multiselect-dropdown-list-wrapper'
            });
            var list = newEl('div', {
                class: 'multiselect-dropdown-list',
                id: ['multiselect-dropdown-list-id'],
                style: {
                    height: config.height
                }
            });
            var search = newEl('input', {
                class: ['multiselect-dropdown-search'].concat([config.searchInput?.class ?? 'form-control']),
                id: ['product-sku-input'],
                style: {
                    width: '100%',
                    display: el.attributes['multiselect-search']?.value === 'true' ? 'block' : 'none'
                },
                placeholder: config.txtSearch
            });
            listWrap.appendChild(search);
            div.appendChild(listWrap);
            listWrap.appendChild(list);

            el.loadOptions = () => {
                list.innerHTML = '';

                if (el.attributes['multiselect-select-all']?.value == 'true') {
                    var op = newEl('div', {
                        class: 'multiselect-dropdown-all-selector'
                    })
                    var ic = newEl('input', {
                        type: 'checkbox'
                    });
                    op.appendChild(ic);
                    op.appendChild(newEl('label', {
                        text: config.txtAll
                    }));

                    op.addEventListener('click', () => {
                        op.classList.toggle('checked');
                        op.querySelector("input").checked = !op.querySelector("input").checked;

                        var ch = op.querySelector("input").checked;
                        list.querySelectorAll(":scope > div:not(.multiselect-dropdown-all-selector)")
                            .forEach(i => {
                                if (i.style.display !== 'none') {
                                    i.querySelector("input").checked = ch;
                                    i.optEl.selected = ch
                                }
                            });

                        el.dispatchEvent(new Event('change'));
                    });
                    ic.addEventListener('click', (ev) => {
                        ic.checked = !ic.checked;
                    });
                    el.addEventListener('change', (ev) => {
                        let itms = Array.from(list.querySelectorAll(":scope > div:not(.multiselect-dropdown-all-selector)")).filter(e => e.style.display !== 'none')
                        let existsNotSelected = itms.find(i => !i.querySelector("input").checked);
                        if (ic.checked && existsNotSelected) ic.checked = false;
                        else if (ic.checked == false && existsNotSelected === undefined) ic.checked = true;
                    });

                    list.appendChild(op);
                }

                Array.from(el.options).map(o => {
                    var op = newEl('div', {
                        class: o.selected ? 'checked' : '',
                        optEl: o
                    })
                    var ic = newEl('input', {
                        type: 'checkbox',
                        checked: o.selected
                    });
                    op.appendChild(ic);
                    op.appendChild(newEl('label', {
                        text: o.text
                    }));

                    op.addEventListener('click', () => {
                        op.classList.toggle('checked');
                        op.querySelector("input").checked = !op.querySelector("input").checked;
                        op.optEl.selected = !!!op.optEl.selected;
                        el.dispatchEvent(new Event('change'));
                    });
                    ic.addEventListener('click', (ev) => {
                        ic.checked = !ic.checked;
                    });
                    o.listitemEl = op;
                    list.appendChild(op);
                });
                div.listEl = listWrap;

                div.refresh = () => {
                    div.querySelectorAll('span.optext, span.placeholder').forEach(t => div.removeChild(t));
                    var sels = Array.from(el.selectedOptions);
                    if (sels.length > (el.attributes['multiselect-max-items']?.value ?? 5)) {
                        div.appendChild(newEl('span', {
                            class: ['optext', 'maxselected'],
                            text: sels.length + ' ' + config.txtSelected
                        }));
                    } else {
                        sels.map(x => {
                            var c = newEl('span', {
                                class: 'optext',
                                text: x.text,
                                srcOption: x
                            });
                            if ((el.attributes['multiselect-hide-x']?.value !== 'true'))
                                c.appendChild(newEl('span', {
                                    class: 'optdel',
                                    text: '🗙',
                                    title: config.txtRemove,
                                    onclick: (ev) => {
                                        c.srcOption.listitemEl.dispatchEvent(new Event('click'));
                                        div.refresh();
                                        ev.stopPropagation();
                                    }
                                }));

                            div.appendChild(c);
                        });
                    }
                    if (0 == el.selectedOptions.length) div.appendChild(newEl('span', {
                        class: 'placeholder',
                        text: el.attributes['placeholder']?.value ?? config.placeholder
                    }));
                };
                div.refresh();
            }
            el.loadOptions();

            search.addEventListener('input', () => {
                // multiple select by ajax function
                var sku = document.getElementById('product-sku-input').value;
                getProducts(sku, sku.length);

                list.querySelectorAll(":scope div:not(.multiselect-dropdown-all-selector)").forEach(d => {
                    var txt = d.querySelector("label").innerText.toUpperCase();
                    d.style.display = txt.includes(search.value.toUpperCase()) ? 'block' : 'none';
                });
            });

            div.addEventListener('click', () => {
                div.listEl.style.display = 'block';
                search.focus();
                search.select();
            });

            document.addEventListener('click', function(event) {
                if (!div.contains(event.target)) {
                    listWrap.style.display = 'none';
                    div.refresh();
                }
            });
        });
    }

    window.addEventListener('load', () => {
        MultiselectDropdown(window.MultiselectDropdownOptions);
    });

    function getProducts(name, length) {
        require(['jquery'], function($) {
            if (length >= 3) {
                var id;
                var selectedSku = $("#skus").val();
                var customurl = "<?php echo $this->getUrl('adminreports/reports/productfilter') ?>";
                $.ajax({
                    url: customurl,
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        sku: name,
                        selectedSku: selectedSku,
                    },
                    complete: function(response) {
                        if (response.responseJSON.success) {
                            // remove unchecked product select options
                            removeUncheckedOptions($);

                            // $('#field2').append('<option value="COAM" selected>COAM</option>');
                            $("#multiselect-dropdown-list-id").append(response.responseJSON.products);
                        } else {
                            // remove unchecked product select options
                            removeUncheckedOptions($);
                            console.log('Error happens. Try again.');
                        }
                    },
                    error: function(xhr, status, errorThrown) {
                        console.log('Error happens. Try again.');
                    }
                });
            } else {
                // remove unchecked product select options
                removeUncheckedOptions($);
            }
        });
    }
    // check box on change finction
    function addSelectOption(sku, name, id) {
        require(['jquery'], function($) {
            var checkbox = $(id).val();
            if (checkbox == 'false') {
                $(id).val('true');
                $('#field2').append('<option value="' + sku + '" selected>' + name + '</option>');
            } else {
                $("option[value='" + sku + "']").remove();
                $(id).val('false');
            }
            var select = document.getElementById('field2');
            var skus = [...select.selectedOptions]
                .map(option => option.value);
            document.getElementById("skus").value = skus;
            console.log(skus);
        })
    }

    // remove unchecked product select options function
    function removeUncheckedOptions($) {
        $("#multiselect-dropdown-list-id :input").each(function(e) {
            id = this.id;
            value = this.value;
            if (value == 'false') {
                $("#class-" + id).remove();
            }
        });
    }
</script>

